# WARNING: Do not edit by hand, this file was generated by Crank:
#
#   https://github.com/gocardless/crank
#

import json

import pytest
import requests
import responses

from gocardless_pro import api_client
from gocardless_pro import errors

from . import helpers

access_token = 'access-token-xyz'
client = api_client.ApiClient('http://example.com', access_token)

@responses.activate
def test_uses_correct_url():
    responses.add(responses.GET, 'http://example.com/test', body='{}')
    client.get('/test')

@responses.activate
def test_authorization_header_present():
    responses.add(responses.GET, 'http://example.com/test', body='{}')
    client.get('/test')
    assert responses.calls[0].request.headers['authorization'] == f'Bearer {access_token}'

@responses.activate
def test_includes_custom_header():
    responses.add(responses.GET, 'http://example.com/test', body='{}')
    client.get('/test', headers={'Accept-Language': 'fr'})
    assert responses.calls[0].request.headers['accept-language'] == 'fr'

@responses.activate
def test_includes_query_params():
    responses.add(responses.GET, 'http://example.com/test', body='{}')
    client.get('/test', params={'page': '1'})
    assert '?page=1' in responses.calls[0].request.url

@responses.activate
def test_post_includes_json_body():
    responses.add(responses.POST, 'http://example.com/test', body='{}')
    client.post('/test', body={'name': 'Billy Jean'})
    assert responses.calls[0].request.body == '{"name": "Billy Jean"}'

@responses.activate
def test_put_includes_json_body():
    responses.add(responses.PUT, 'http://example.com/test', body='{}')
    client.put('/test', body={'name': 'Billy Jean'})
    assert responses.calls[0].request.body == '{"name": "Billy Jean"}'

@responses.activate
def test_delete_includes_json_body():
    responses.add(responses.DELETE, 'http://example.com/test', body='{}')
    client.delete('/test', body={'name': 'Billy Jean'})
    assert responses.calls[0].request.body == '{"name": "Billy Jean"}'

@responses.activate
def test_handles_validation_failed_error():
    fixture = helpers.load_fixture('validation_failed_error')
    responses.add(responses.POST, 'http://example.com/test',
                  body=json.dumps(fixture), status=fixture['error']['code'])

    with pytest.raises(errors.ValidationFailedError) as exception:
        client.post('/test', body={'name': 'Billy Jean'})

    assert exception.value.documentation_url == fixture['error']['documentation_url']
    assert exception.value.errors == fixture['error']['errors']

@responses.activate
def test_handles_invalid_api_usage_error():
    fixture = helpers.load_fixture('invalid_api_usage_error')
    responses.add(responses.POST, 'http://example.com/test',
                  body=json.dumps(fixture), status=fixture['error']['code'])

    with pytest.raises(errors.InvalidApiUsageError) as exception:
        client.post('/test', body={'name': 'Billy Jean'})

    assert exception.value.code == fixture['error']['code']
    assert exception.value.errors == fixture['error']['errors']

@responses.activate
def test_handles_invalid_state_error():
    fixture = helpers.load_fixture('invalid_state_error')
    responses.add(responses.POST, 'http://example.com/test',
                  body=json.dumps(fixture), status=fixture['error']['code'])

    with pytest.raises(errors.InvalidStateError) as exception:
        client.post('/test', body={'name': 'Billy Jean'})

    assert exception.value.message == fixture['error']['message']
    assert exception.value.errors == fixture['error']['errors']

@responses.activate
def test_handles_idempotent_creation_conflict_error():
    fixture = helpers.idempotent_creation_conflict_body('PM00001078ZJJN')
    responses.add(responses.POST, 'http://example.com/test',
                  body=json.dumps(fixture), status=fixture['error']['code'])

    with pytest.raises(errors.IdempotentCreationConflictError) as exception:
        client.post('/test', body={'name': 'Billy Jean'})

    assert exception.value.errors == fixture['error']['errors']
    assert exception.value.conflicting_resource_id == fixture['error']['errors'][0]['links']['conflicting_resource_id']

@responses.activate
def test_handles_gocardless_error():
    fixture = helpers.load_fixture('gocardless_error')
    responses.add(responses.POST, 'http://example.com/test',
                  body=json.dumps(fixture), status=fixture['error']['code'])

    with pytest.raises(errors.GoCardlessInternalError) as exception:
        client.post('/test', body={'name': 'Billy Jean'})

    assert exception.value.type == fixture['error']['type']
    assert exception.value.request_id == fixture['error']['request_id']

@responses.activate
def test_handles_malformed_response():
    responses.add(responses.POST, 'http://example.com/test',
                  body='not valid json...', status=200)

    with pytest.raises(errors.MalformedResponseError):
        client.post('/test', body={'name': 'Billy Jean'})

@responses.activate
def test_handles_valid_empty_response():
    responses.add(responses.DELETE, 'http://example.com/test', body='', status=204)
    client.delete('/test', body={'name': 'Billy Jean'})
    assert responses.calls[0].request.body == '{"name": "Billy Jean"}'


@responses.activate
def test_handles_invalid_empty_response():
    responses.add(responses.POST, 'http://example.com/test', body='', status=201)

    with pytest.raises(errors.MalformedResponseError):
        client.post('/test', body={'name': 'Billy Jean'})
