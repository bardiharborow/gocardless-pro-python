# WARNING: Do not edit by hand, this file was generated by Crank:
#
#   https://github.com/gocardless/crank
#

from gocardless_pro import errors

from . import helpers

def test_invalid_state_error_message():
    fixture = helpers.load_fixture('invalid_state_error')
    response_errors = fixture.get('error').get('errors', [])
    error = errors.ApiError.exception_for(fixture['error']['code'],fixture['error']['type'], response_errors)
    assert errors.InvalidStateError == error
    error = error(fixture['error'])
    assert str(error) == 'Mandate is already active or being submitted'

def test_invalid_api_usage_message():
    fixture = helpers.load_fixture('invalid_api_usage_error')
    response_errors = fixture.get('error').get('errors', [])
    error = errors.ApiError.exception_for(fixture['error']['code'],fixture['error']['type'], response_errors)
    assert errors.InvalidApiUsageError == error
    error = error(fixture['error'])
    assert str(error) == 'Invalid document structure (Root element must be an object.)'

def test_validation_failed_message():
    fixture = helpers.load_fixture('validation_failed_error')
    response_errors = fixture.get('error').get('errors', [])
    error = errors.ApiError.exception_for(fixture['error']['code'],fixture['error']['type'], response_errors)
    assert errors.ValidationFailedError == error
    error = error(fixture['error'])

    branch_error = 'branch_code must be a number /customer_bank_accounts/branch_code'
    country_error = 'country_code is invalid /customer_bank_accounts/country_code'

    expected = f'Validation failed ({branch_error}, {country_error})'
    assert str(error) == expected

def test_validation_failed_duplicate_bank_account_message():
    fixture = helpers.load_fixture('validation_failed_duplicate_bank_account_error')
    response_errors = fixture.get('error').get('errors', [])
    error = errors.ApiError.exception_for(fixture['error']['code'],fixture['error']['type'], response_errors)
    assert errors.ValidationFailedError == error
    error = error(fixture['error'])
    assert str(error) == 'Bank account already exists'

def test_gocardless_error_message():
    fixture = helpers.load_fixture('gocardless_error')
    response_errors = fixture.get('error').get('errors', [])
    error = errors.ApiError.exception_for(fixture['error']['code'],fixture['error']['type'], response_errors)
    assert errors.GoCardlessInternalError == error
    error = error(fixture['error'])
    assert str(error) == 'Uh-oh!'

def test_idempotent_creation_conflict_error_message():
    fixture = helpers.idempotent_creation_conflict_body('PM00001078ZJJN')
    error = errors.ApiError.exception_for(fixture['error']['code'],fixture['error']['type'], fixture['error']['errors'])
    assert errors.IdempotentCreationConflictError == error
    error = error(fixture['error'])
    assert str(error) == 'None (A resource has already been created with this idempotency key)'
    assert error.conflicting_resource_id == "PM00001078ZJJN"
